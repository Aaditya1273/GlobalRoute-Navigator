generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Shipment {
  id           String   @id @default(uuid())
  origin       String // City, Airport, Port Name
  destination  String // City, Airport, Port Name
  cargo_weight Float // Weight in kg/tons
  cargo_volume Float // Volume in cubic meters
  priority     Priority // FASTEST, CHEAPEST, SAFEST
  createdAt    DateTime @default(now())
  status       Status // PENDING, IN_TRANSIT, DELIVERED
  userId       String // Links to User
  user         User     @relation(fields: [userId], references: [id])

  routes Route[] @relation("ShipmentRoutes")
}

enum Priority {
  FASTEST
  CHEAPEST
  SAFEST
}

enum Status {
  PENDING
  IN_TRANSIT
  DELIVERED
}

model Route {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Add your route fields here
}

model Segment {
  id               String   @id @default(uuid())
  routeId          String
  route            Route    @relation(fields: [routeId], references: [id], name: "RouteSegments")
  mode             Mode // LAND, AIR, SEA
  from_location    String // City/Port/Airport Code
  to_location      String // City/Port/Airport Code
  cost             Float // Cost for this segment
  time             Float // Time (in hours)
  border_crossings String // Comma-separated list of countries crossed
  start_time       DateTime // When this segment begins
  end_time         DateTime // When this segment ends
  createdAt        DateTime @default(now())
}

enum Mode {
  LAND
  AIR
  SEA
}

model RiskEvent {
  id         String    @id @default(uuid())
  type       RiskType // CONFLICT, DISASTER, SANCTION
  location   String // Affected city/country
  severity   Float // Scaled from 0 to 1 (higher = riskier)
  start_time DateTime
  end_time   DateTime?
  createdAt  DateTime  @default(now())
}

enum RiskType {
  CONFLICT
  DISASTER
  SANCTION
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  name        String?
  savedRoutes SavedRoute[]  @relation("UserToSavedRoute")
  password    String
  role        Role // ADMIN, LOGISTICS_PROVIDER, CLIENT
  createdAt   DateTime      @default(now())

  shipments   Shipment[]
}

enum Role {
  ADMIN
  LOGISTICS_PROVIDER
  CLIENT
}

model SavedRoute {
  id          String   @id @default(cuid())
  name        String
  description String?
  startPoint  String
  endPoint    String
  createdAt   DateTime @default(now())
  user        User     @relation("UserToSavedRoute", fields: [userId], references: [id])
  userId      String
  updatedAt   DateTime @updatedAt
}
